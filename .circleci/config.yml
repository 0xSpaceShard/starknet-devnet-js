# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
    build-and-test:
        machine:
            image: ubuntu-2204:2024.01.2
        resource_class: xlarge
        environment:
            DEVNET_VERSION: "0.2.0-rc.3"
            DEVNET_DIR: "/tmp/devnet-ci-storage"
            # to avoid definition complications, when updating DEVNET_DIR, always update DEVNET_PATH (should be prefix)
            DEVNET_PATH: "/tmp/devnet-ci-storage/starknet-devnet"
            FORKED_DEVNET_PORT: 5051
        steps:
            - checkout
            - run:
                  name: Versions
                  command: |
                      echo "node: $(node --version)"
                      echo "npm: $(npm --version)"
            - run:
                  name: Install
                  command: npm ci
            - run:
                  name: Build
                  command: npm run build
            - run:
                  name: Format
                  command: npm run format-check
            - run:
                  name: Lint
                  command: npm run lint-check
            - run:
                  name: Check all tests executed
                  command: npm run check-all-tests-executed
            - run:
                  name: Spawn Devnet
                  command: |
                      docker run -d --network host --name devnet \
                        shardlabs/starknet-devnet-rs:${DEVNET_VERSION} --state-archive-capacity full --dump-on request
            - run:
                  name: Spawn Devnet forked from Mainnet
                  command: |
                      docker run -d --network host --name forked-devnet \
                        shardlabs/starknet-devnet-rs:${DEVNET_VERSION} --port ${FORKED_DEVNET_PORT} --fork-network https://free-rpc.nethermind.io/mainnet-juno/v0_7
            - run:
                  name: Download precompiled Devnet
                  command: |
                      URL=https://github.com/0xSpaceShard/starknet-devnet-rs/releases/download/v${DEVNET_VERSION}/starknet-devnet-x86_64-unknown-linux-gnu.tar.gz
                      mkdir -p ${DEVNET_DIR}
                      curl -sSfL ${URL} | tar -xvz -C ${DEVNET_DIR}
            - run:
                  name: Spawn Anvil
                  command: |
                      docker run -d --network host --name anvil \
                        ghcr.io/foundry-rs/foundry:nightly-5b7e4cb3c882b28f3c32ba580de27ce7381f415a anvil
            - run:
                  name: Test
                  command: npm run test
            - run:
                  name: Test keepAlive
                  command: |
                      node -e 'require("./dist/devnet").Devnet.spawnVersion("latest", { args: ["--port", "'${PORT}'"] })'
                      curl -sSfL localhost:${PORT}/is_alive || echo "Ok... expected to be unresponsive"

                      node -e 'require("./dist/devnet").Devnet.spawnVersion("latest", { args: ["--port", "'${PORT}'"], keepAlive: true })'
                      curl -sSfL localhost:${PORT}/is_alive

                      lsof -i :${PORT} | awk 'NR==2{print $2}' | xargs kill
                      curl -sSfL localhost:${PORT}/is_alive || echo "Ok... expected to be unresponsive"
                  environment:
                      PORT: 9876
    publish:
        docker:
            - image: cimg/node:20.10.0
        steps:
            - checkout
            - run:
                  name: Publish
                  command: ./scripts/npm-publish.sh

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
    build-test-maybe-publish:
        jobs:
            - build-and-test
            - publish:
                  context: spaceshard
                  filters:
                      branches:
                          only:
                              - master
                  requires:
                      - build-and-test
