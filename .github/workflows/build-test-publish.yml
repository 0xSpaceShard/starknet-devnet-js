name: Build, Test and Publish

on:
    push:
        branches: [master]
    pull_request:
        branches: ["*"]

env:
    DEVNET_VERSION: "0.6.1"
    DEVNET_DIR: "/tmp/devnet-ci-storage"
    DEVNET_PATH: "/tmp/devnet-ci-storage/starknet-devnet"
    FORKED_DEVNET_PORT: 5051

permissions:
    id-token: write
    contents: read

jobs:
    build-and-test:
        runs-on: ubuntu-22.04
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Print versions
              run: |
                  echo "node: $(node --version)"
                  echo "npm: $(npm --version)"

            - name: Install dependencies
              run: npm ci

            - name: Build
              run: npm run build

            - name: Check code formatting
              run: npm run format-check

            - name: Run linter
              run: npm run lint-check

            - name: Verify all tests are executed
              run: npm run check-all-tests-executed

            - name: Start regular Devnet container
              run: |
                  docker run -d --network host --name devnet \
                    shardlabs/starknet-devnet-rs:${DEVNET_VERSION} \
                    --state-archive-capacity full \
                    --dump-on request

            - name: Start Mainnet-forked Devnet container
              run: |
                  docker run -d --network host --name forked-devnet \
                    shardlabs/starknet-devnet-rs:${DEVNET_VERSION} \
                    --port ${FORKED_DEVNET_PORT} \
                    --fork-network http://rpc.pathfinder.equilibrium.co/mainnet/rpc/v0_9

            - name: Download Devnet binary
              run: |
                  mkdir -p ${DEVNET_DIR}
                  curl -sSfL https://github.com/0xSpaceShard/starknet-devnet/releases/download/v${DEVNET_VERSION}/starknet-devnet-x86_64-unknown-linux-gnu.tar.gz | tar -xvz -C ${DEVNET_DIR}

            - name: Start Anvil container
              run: |
                  docker run -d --network host --name anvil \
                    ghcr.io/foundry-rs/foundry:nightly-5b7e4cb3c882b28f3c32ba580de27ce7381f415a anvil

            - name: Run tests
              run: npm run test

            - name: Run keepAlive test
              run: ./scripts/test-keep-alive.sh

    publish:
        needs: build-and-test
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/master'
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: "npm"
                  registry-url: "https://registry.npmjs.org"

            - name: Update npm
              run: npm install -g npm@latest

            - name: Extract package information
              id: package-info
              run: |
                  echo "name=$(jq -r '.name' package.json)" >> $GITHUB_OUTPUT
                  echo "version=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT
                  DIST_TAG=$(echo "$(jq -r '.version' package.json)" | awk '/^v?[0-9.]+$/{ print "latest"; next; } { print "beta" }')
                  echo "dist_tag=$DIST_TAG" >> $GITHUB_OUTPUT

            - name: Check published version
              id: version-check
              run: |
                  NPM_VERSION=$(npm view "${{ steps.package-info.outputs.name }}" dist-tags."${{ steps.package-info.outputs.dist_tag }}" || echo "")
                  echo "Current version: ${{ steps.package-info.outputs.version }}"
                  echo "Published version: $NPM_VERSION"
                  if [ "${{ steps.package-info.outputs.version }}" = "$NPM_VERSION" ]; then
                    echo "skip_publish=true" >> $GITHUB_OUTPUT
                    echo "Version already published. Skipping."
                  else
                    echo "skip_publish=false" >> $GITHUB_OUTPUT
                    echo "New version detected. Will publish."
                  fi

            - name: Publish to NPM
              if: steps.version-check.outputs.skip_publish != 'true'
              run: npm publish --access=public --tag=${{ steps.package-info.outputs.dist_tag }}

            - name: Create GitHub Release
              if: steps.version-check.outputs.skip_publish != 'true'
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: v${{ steps.package-info.outputs.version }}
                  name: Release v${{ steps.package-info.outputs.version }}
                  draft: false
                  prerelease: ${{ steps.package-info.outputs.dist_tag == 'beta' }}
                  generate_release_notes: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
